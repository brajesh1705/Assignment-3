#include<bits/stdc++.h>
#define ll long long
#define mod 1000000007LL
#define sz(x) x.size()
#define inf 1000000000
using namespace std;
vector<pair<ll,ll>> g;
map<pair<ll,ll>,int>weight;
int n;
void bf(int src)
{
	int distance[n+1];
	for(int i=1;i<=n;i++)
		distance[i]=inf;
	distance[src]=0;
	for(int i=0;i<n-1;i++)
	{
		for(int j=0;j<sz(g);j++)
		{
			int u=g[j].first;
			int v=g[j].second;
			if(distance[u]+weight[make_pair(u,v)]<distance[v]&&distance[u]!=inf)
				distance[v]=distance[u]+weight[make_pair(u,v)];
		}

	}
	for(int i=0;i<sz(g);i++)
	{
		int u=g[i].first;
		int v=g[i].second;
		if(distance[u]+weight[make_pair(u,v)]<distance[v]&&distance[u]!=inf)
		{
			cout<<"spanning tree of "<<src<<" contains negative cycle"<<endl;
			break;
		}
	}
	cout<<"distances from "<<src<<"->";
	for(int i=1;i<=n;i++)
	{
			if(distance[i]!=1000000000)
			cout<<distance[i]<<" ";
			else cout<<"Inf ";
	}
	cout<<endl;
	return;
}
int main()
{
    double start_s=clock();
    cout<<"enter the number of vertices"<<endl;
  	cin>>n;
  	cout<<"enter the input in form of adjacency matrix"<<endl;
  	int a;
  	for(int i=1;i<=n;i++)
  		for(int j=1;j<=n;j++)
  		{
  			cin>>a;
  			if(a!=0)
  			{
  				g.push_back(make_pair(i,j));
  				weight[make_pair(i,j)]=a;
  			}
  		}
  	for(int i=1;i<=n;i++)
  		bf(i);
  	double stop_s=clock();
	cout << "time: " << (stop_s-start_s)/double(CLOCKS_PER_SEC)*1000 << endl;

    return 0;
}
